document.addEventListener('DOMContentLoaded', () => {

    // --- CONFIGURATION ---
    const NETLIFY_FUNCTION_PATH = '/.netlify/functions/call-groq2';

    // --- OBJET DE TRADUCTION ---
    const translations = {
        en: {
            pageTitle: "Equilibre - Your Personalized Meal Planner v3",
            headerSubtitle: "Your smart meal planner for a balanced weight",
            customizeTitle: "Customize your plan",
            yourInfoTitle: "Your information",
            genderLabel: "Gender",
            genderMale: "Male",
            genderFemale: "Female",
            ageLabel: "Age",
            agePlaceholder: "e.g., 35",
            weightLabel: "Weight (kg)",
            weightPlaceholder: "e.g., 70",
            heightLabel: "Height (cm)",
            heightPlaceholder: "e.g., 175",
            activityLabel: "Physical activity level",
            activitySedentary: "Sedentary",
            activityLight: "Lightly active",
            activityModerate: "Moderately active",
            activityVery: "Very active",
            activityExtra: "Extremely active",
            calculateNeedsBtn: "Calculate my needs",
            bmiLabel: "BMI",
            healthyNeedsLabel: "Needs (healthy weight)",
            kcalDay: "kcal/day",
            maintenanceLabel: "Maintenance",
            kcalDay2: "kcal/day",
            ingredientsOptionsTitle: "Your ingredients and options",
            ingredientsLabel: "Available ingredients",
            ingredientsPlaceholder: "e.g., Chicken, broccoli, rice...",
            suggestIngredientsBtn: "Suggest a list",
            mealStructureLabel: "Meal structure",
            plan3Meals: "3 meals / day",
            plan3Meals1Snack: "With a snack",
            goalTitle: "Your weight goal",
            chooseGoalLabel: "Choose your goal:",
            goalMaintain: "Maintain weight",
            goalMild: "Mild weight loss (~0.25 kg/week)",
            goalModerate: "Moderate weight loss (~0.5 kg/week)",
            goalStrong: "Strong weight loss (~0.75 kg/week)",
            warningStrongDeficit: "**Warning:** A large calorie deficit can be risky.",
            warningHealthyDeficit: "Your BMI is normal. Losing more weight is not generally recommended.",
            dailyCalorieGoalLabel: "Daily calorie target:",
            generateMenuBtn: "Generate my personalized menu",
            resultsTitle: "Your Weekly Menu",
            loaderText1: "Your personal AI chef is preparing your menu...",
            loaderText2: "This may take up to 30 seconds.",
            printBtn: "üñ®Ô∏è Print menu and shopping list",
            footerDisclaimerTitle: "Disclaimer",
            footerDisclaimer1: "This application provides nutritional suggestions and does not replace medical advice.",
            footerDisclaimer2: "Menus are generated by an AI and should be checked against your allergies.",
            footerDisclaimer3: "Nutritional data from ANSES's Ciqual 2020 table.",
            suggestedIngredientsList: "Chicken, Salmon, Red lentils, Whole wheat pasta, Basmati rice, Milk, Whole wheat bread, Rolled oats, Broccoli, Carrots, Tomatoes, Onion, Garlic, Olive oil, Plain yogurt, Apples, Walnuts.",
            alertFillAllFields: "Please fill in all the calculator fields.",
            alertDataLoading: "Data is still loading, please wait a moment.",
            imcUnderweight: "Underweight",
            imcNormal: "Normal weight",
            imcOverweight: "Overweight",
            imcObesity: "Obesity",
            chartMonth: "Month",
            chartProjectedWeight: "Projected weight (kg)",
            chartTargetWeight: "Target healthy weight (kg)",
            chartWeightAxis: "Weight (kg)",
            legendProteins: "Proteins",
            legendCarbs: "Carbohydrates",
            legendFats: "Fats",
            mealBreakfast: "Breakfast",
            mealLunch: "Lunch",
            mealDinner: "Dinner",
            mealSnack: "Snack",
            alertCalculateNeedsFirst: "Please calculate your needs and set a goal first.",
            alertListIngredients: "Please list some ingredients.",
            errorIaMenu: "The AI could not generate a menu.",
            btnGenerating: "Generating...",
            errorServer: "Server error:",
            errorJson: "Parsing Error: The server's response is not valid JSON. The AI may have encountered an issue. Please try again.",
            alertGenerateMenuFirst: "Please generate a complete menu first.",
            printShopListTitle: "Your Shopping List (main ingredients)",
            printStaplesTitle: "Staples to have on hand",
            printWeekPlanTitle: "Weekly Plan",
            printDay: "Day",
            printBreakfast: "Breakfast",
            printLunch: "Lunch",
            printDinner: "Dinner",
            printSnack: "Snack",
            printRecipesTitle: "Detailed Recipes",
            printCalculated: "(calculated)",
            printIngredients: "Ingredients",
            printPreparation: "Preparation",
            printMenuTitle: "Your Equilibre Menu",
            promptLang: "English (en-US)",
            promptRole: "**ROLE**: Expert nutritionist and creative chef. Generate a complete 7-day meal plan.",
            promptContext: "**CONTEXT**:",
            promptMenuStructure: "Menu Structure",
            promptAvailableIngredients: "Available Ingredients",
            promptNutritionalGoal: "Nutritional Goal",
            promptNutritionalGoalDetail: "Generate a menu that is balanced, with a good source of protein for lunch and dinner.",
            promptRules: "**RULES**:",
            promptRuleCritical1: "**CRITICAL**: Your entire response MUST be a single, valid JSON object matching the schema below. Do not include any comments.",
            promptRuleLanguage: "**LANGUAGE**: You MUST generate the entire response (meal names, ingredients, preparation steps) in",
            promptRuleNoCalc: "**DO NOT calculate calories or macronutrients.** This is very important.",
            promptRuleMealDetails: "For each meal, provide a name, a list of base ingredients with common culinary units (g, ml, piece, cup, tablespoon, etc.), and preparation steps.",
            promptRuleQuantities: "The quantities should be for a standard single serving.",
            promptRulePrioritize: "You MUST prioritize using the available ingredients.",
            promptRuleStaples: "You may add a MINIMAL number of common staples (salt, pepper, oil) if necessary. List them in 'added_staples'."
        },
        de: {
            pageTitle: "Equilibre - Ihr personalisierter Mahlzeitenplaner v3",
            headerSubtitle: "Ihr intelligenter Mahlzeitenplaner f√ºr ein ausgeglichenes Gewicht",
            customizeTitle: "Passen Sie Ihren Plan an",
            yourInfoTitle: "Ihre Informationen",
            genderLabel: "Geschlecht",
            genderMale: "M√§nnlich",
            genderFemale: "Weiblich",
            ageLabel: "Alter",
            agePlaceholder: "z.B. 35",
            weightLabel: "Gewicht (kg)",
            weightPlaceholder: "z.B. 70",
            heightLabel: "Gr√∂√üe (cm)",
            heightPlaceholder: "z.B. 175",
            activityLabel: "K√∂rperliche Aktivit√§t",
            activitySedentary: "Sitzend",
            activityLight: "Leicht aktiv",
            activityModerate: "M√§√üig aktiv",
            activityVery: "Sehr aktiv",
            activityExtra: "Extrem aktiv",
            calculateNeedsBtn: "Meinen Bedarf berechnen",
            bmiLabel: "BMI",
            healthyNeedsLabel: "Bedarf (Gesundgewicht)",
            kcalDay: "kcal/Tag",
            maintenanceLabel: "Erhaltung",
            kcalDay2: "kcal/Tag",
            ingredientsOptionsTitle: "Ihre Zutaten und Optionen",
            ingredientsLabel: "Verf√ºgbare Zutaten",
            ingredientsPlaceholder: "z.B. Huhn, Brokkoli, Reis...",
            suggestIngredientsBtn: "Eine Liste vorschlagen",
            mealStructureLabel: "Mahlzeitenstruktur",
            plan3Meals: "3 Mahlzeiten / Tag",
            plan3Meals1Snack: "Mit einem Snack",
            goalTitle: "Ihr Gewichtsziel",
            chooseGoalLabel: "W√§hlen Sie Ihr Ziel:",
            goalMaintain: "Gewicht halten",
            goalMild: "Leichte Gewichtsabnahme (~0.25 kg/Woche)",
            goalModerate: "M√§√üige Gewichtsabnahme (~0.5 kg/Woche)",
            goalStrong: "Starke Gewichtsabnahme (~0.75 kg/Woche)",
            warningStrongDeficit: "**Achtung:** Ein gro√ües Kaloriendefizit kann riskant sein.",
            warningHealthyDeficit: "Ihr BMI ist normal. Mehr Gewicht zu verlieren wird generell nicht empfohlen.",
            dailyCalorieGoalLabel: "T√§gliches Kalorienziel:",
            generateMenuBtn: "Meinen personalisierten Speiseplan erstellen",
            resultsTitle: "Ihr Wochenmen√º",
            loaderText1: "Ihr pers√∂nlicher KI-Koch bereitet Ihr Men√º vor...",
            loaderText2: "Dies kann bis zu 30 Sekunden dauern.",
            printBtn: "üñ®Ô∏è Men√º und Einkaufsliste drucken",
            footerDisclaimerTitle: "Haftungsausschluss",
            footerDisclaimer1: "Diese Anwendung bietet Ern√§hrungsvorschl√§ge und ersetzt keine √§rztliche Beratung.",
            footerDisclaimer2: "Die Men√ºs werden von einer KI generiert und sollten auf Ihre Allergien √ºberpr√ºft werden.",
            footerDisclaimer3: "N√§hrwertdaten aus der Ciqual 2020 Tabelle von ANSES.",
            suggestedIngredientsList: "Huhn, Lachs, Rote Linsen, Vollkornnudeln, Basmatireis, Milch, Vollkornbrot, Haferflocken, Brokkoli, Karotten, Tomaten, Zwiebel, Knoblauch, Oliven√∂l, Naturjoghurt, √Ñpfel, Waln√ºsse.",
            alertFillAllFields: "Bitte f√ºllen Sie alle Felder des Rechners aus.",
            alertDataLoading: "Daten werden noch geladen, bitte warten Sie einen Moment.",
            imcUnderweight: "Untergewicht",
            imcNormal: "Normalgewicht",
            imcOverweight: "√úbergewicht",
            imcObesity: "Fettleibigkeit",
            chartMonth: "Monat",
            chartProjectedWeight: "Voraussichtliches Gewicht (kg)",
            chartTargetWeight: "Ziel-Gesundgewicht (kg)",
            chartWeightAxis: "Gewicht (kg)",
            legendProteins: "Proteine",
            legendCarbs: "Kohlenhydrate",
            legendFats: "Fette",
            mealBreakfast: "Fr√ºhst√ºck",
            mealLunch: "Mittagessen",
            mealDinner: "Abendessen",
            mealSnack: "Snack",
            alertCalculateNeedsFirst: "Bitte berechnen Sie zuerst Ihren Bedarf und legen Sie ein Ziel fest.",
            alertListIngredients: "Bitte listen Sie einige Zutaten auf.",
            errorIaMenu: "Die KI konnte kein Men√º erstellen.",
            btnGenerating: "Wird generiert...",
            errorServer: "Serverfehler:",
            errorJson: "Analysefehler: Die Antwort des Servers ist kein g√ºltiges JSON. Die KI hatte m√∂glicherweise ein Problem. Bitte versuchen Sie es erneut.",
            alertGenerateMenuFirst: "Bitte erstellen Sie zuerst ein vollst√§ndiges Men√º.",
            printShopListTitle: "Ihre Einkaufsliste (Hauptzutaten)",
            printStaplesTitle: "Grundzutaten zum Vorr√§tighalten",
            printWeekPlanTitle: "Wochenplan",
            printDay: "Tag",
            printBreakfast: "Fr√ºhst√ºck",
            printLunch: "Mittagessen",
            printDinner: "Abendessen",
            printSnack: "Snack",
            printRecipesTitle: "Detaillierte Rezepte",
            printCalculated: "(berechnet)",
            printIngredients: "Zutaten",
            printPreparation: "Zubereitung",
            printMenuTitle: "Ihr Equilibre Men√º",
            promptLang: "German (de-DE)",
            promptRole: "**ROLLE**: Experte f√ºr Ern√§hrung und kreativer Koch. Erstellen Sie einen vollst√§ndigen 7-Tage-Speiseplan.",
            promptContext: "**KONTEXT**:",
            promptMenuStructure: "Mahlzeitenstruktur",
            promptAvailableIngredients: "Verf√ºgbare Zutaten",
            promptNutritionalGoal: "Ern√§hrungsziel",
            promptNutritionalGoalDetail: "Erstellen Sie einen ausgewogenen Speiseplan mit einer guten Proteinquelle zum Mittag- und Abendessen.",
            promptRules: "**REGELN**:",
            promptRuleCritical1: "**KRITISCH**: Ihre gesamte Antwort MUSS ein einziges, g√ºltiges JSON-Objekt sein, das dem folgenden Schema entspricht. F√ºgen Sie keine Kommentare hinzu.",
            promptRuleLanguage: "**SPRACHE**: Sie M√úSSEN die gesamte Antwort (Namen der Mahlzeiten, Zutaten, Zubereitungsschritte) auf",
            promptRuleNoCalc: "**BERECHNEN SIE KEINE Kalorien oder Makron√§hrstoffe.** Dies ist sehr wichtig.",
            promptRuleMealDetails: "Geben Sie f√ºr jede Mahlzeit einen Namen, eine Liste der Grundzutaten mit g√§ngigen kulinarischen Einheiten (g, ml, St√ºck, Tasse, Essl√∂ffel usw.) und Zubereitungsschritte an.",
            promptRuleQuantities: "Die Mengenangaben sollten f√ºr eine einzelne Standardportion gelten.",
            promptRulePrioritize: "Sie M√úSSEN die Verwendung der verf√ºgbaren Zutaten priorisieren.",
            promptRuleStaples: "Sie k√∂nnen bei Bedarf eine MINIMALE Anzahl g√§ngiger Grundnahrungsmittel (Salz, Pfeffer, √ñl) hinzuf√ºgen. Listen Sie diese in 'added_staples' auf."
        },
        fr: {
            pageTitle: "Equilibre - Votre Planificateur de Repas Personnalis√© v3",
            headerSubtitle: "Votre planificateur de repas intelligent pour un poids √©quilibr√©",
            customizeTitle: "Personnalisez votre plan",
            yourInfoTitle: "Vos informations",
            genderLabel: "Sexe",
            genderMale: "Homme",
            genderFemale: "Femme",
            ageLabel: "√Çge",
            agePlaceholder: "ex: 35",
            weightLabel: "Poids (kg)",
            weightPlaceholder: "ex: 70",
            heightLabel: "Taille (cm)",
            heightPlaceholder: "ex: 175",
            activityLabel: "Niveau d'activit√© physique",
            activitySedentary: "S√©dentaire",
            activityLight: "L√©g√®rement actif",
            activityModerate: "Mod√©r√©ment actif",
            activityVery: "Tr√®s actif",
            activityExtra: "Extr√™mement actif",
            calculateNeedsBtn: "Calculer mes besoins",
            bmiLabel: "IMC",
            healthyNeedsLabel: "Besoins (poids sant√©)",
            kcalDay: "kcal/jour",
            maintenanceLabel: "Maintien",
            kcalDay2: "kcal/jour",
            ingredientsOptionsTitle: "Vos ingr√©dients et options",
            ingredientsLabel: "Ingr√©dients disponibles",
            ingredientsPlaceholder: "ex: Poulet, brocoli, riz...",
            suggestIngredientsBtn: "Sugg√©rer une liste",
            mealStructureLabel: "Structure des repas",
            plan3Meals: "3 repas / jour",
            plan3Meals1Snack: "Avec collation",
            goalTitle: "Votre objectif de poids",
            chooseGoalLabel: "Choisissez votre objectif :",
            goalMaintain: "Maintien du poids",
            goalMild: "Perte de poids l√©g√®re (~0.25 kg/semaine)",
            goalModerate: "Perte de poids mod√©r√©e (~0.5 kg/semaine)",
            goalStrong: "Perte de poids forte (~0.75 kg/semaine)",
            warningStrongDeficit: "**Attention :** Un d√©ficit calorique important peut pr√©senter des risques.",
            warningHealthyDeficit: "Votre IMC est normal. Perdre plus de poids n'est g√©n√©ralement pas recommand√©.",
            dailyCalorieGoalLabel: "Objectif calorique journalier :",
            generateMenuBtn: "G√©n√©rer mon menu personnalis√©",
            resultsTitle: "Votre Menu de la Semaine",
            loaderText1: "Votre chef personnel IA pr√©pare votre menu...",
            loaderText2: "Cette op√©ration peut prendre jusqu'√† 30 secondes.",
            printBtn: "üñ®Ô∏è Imprimer le menu et la liste de courses",
            footerDisclaimerTitle: "Avis de non-responsabilit√©",
            footerDisclaimer1: "Cette application fournit des suggestions nutritionnelles et ne remplace pas un avis m√©dical.",
            footerDisclaimer2: "Les menus sont g√©n√©r√©s par une IA et doivent √™tre v√©rifi√©s en fonction de vos allergies.",
            footerDisclaimer3: "Donn√©es nutritionnelles issues de la table Ciqual 2020 de l'ANSES.",
            suggestedIngredientsList: "Poulet, Saumon, Lentilles corail, P√¢tes compl√®tes, Riz basmati, Lait, Pain complet, Flocons d'avoine, Brocoli, Carottes, Tomates, Oignon, Ail, Huile d'olive, Yaourts nature, Pommes, Noix.",
            alertFillAllFields: "Veuillez remplir tous les champs du calculateur.",
            alertDataLoading: "Les donn√©es sont en cours de chargement, veuillez patienter un instant.",
            imcUnderweight: "Maigreur",
            imcNormal: "Poids normal",
            imcOverweight: "Surpoids",
            imcObesity: "Ob√©sit√©",
            chartMonth: "Mois",
            chartProjectedWeight: "Poids projet√© (kg)",
            chartTargetWeight: "Poids sant√© cible (kg)",
            chartWeightAxis: "Poids (kg)",
            legendProteins: "Prot√©ines",
            legendCarbs: "Glucides",
            legendFats: "Lipides",
            mealBreakfast: "Petit-d√©jeuner",
            mealLunch: "D√©jeuner",
            mealDinner: "D√Æner",
            mealSnack: "Collation",
            alertCalculateNeedsFirst: "Veuillez d'abord calculer vos besoins et choisir un objectif.",
            alertListIngredients: "Veuillez lister des ingr√©dients.",
            errorIaMenu: "L'IA n'a pas pu g√©n√©rer de menu.",
            btnGenerating: "G√©n√©ration...",
            errorServer: "Erreur du serveur:",
            errorJson: "Erreur d'analyse : La r√©ponse du serveur n'est pas un JSON valide. L'IA a peut-√™tre eu un probl√®me. Veuillez r√©essayer.",
            alertGenerateMenuFirst: "Veuillez d'abord g√©n√©rer un menu complet.",
            printShopListTitle: "Votre Liste de Courses (ingr√©dients principaux)",
            printStaplesTitle: "Ingr√©dients de base √† pr√©voir",
            printWeekPlanTitle: "Plan de la Semaine",
            printDay: "Jour",
            printBreakfast: "Petit-d√©jeuner",
            printLunch: "D√©jeuner",
            printDinner: "D√Æner",
            printSnack: "Collation",
            printRecipesTitle: "Recettes D√©taill√©es",
            printCalculated: "(calcul√©)",
            printIngredients: "Ingr√©dients",
            printPreparation: "Pr√©paration",
            printMenuTitle: "Votre Menu √âquilibre",
            promptLang: "French (fr-FR)",
            promptRole: "**ROLE**: Expert nutritionniste et chef cr√©atif. G√©n√©rer un plan de repas complet pour 7 jours.",
            promptContext: "**CONTEXTE**:",
            promptMenuStructure: "Structure du menu",
            promptAvailableIngredients: "Ingr√©dients disponibles",
            promptNutritionalGoal: "Objectif nutritionnel",
            promptNutritionalGoalDetail: "G√©n√©rer un menu √©quilibr√©, avec une bonne source de prot√©ines pour le d√©jeuner et le d√Æner.",
            promptRules: "**R√àGLES**:",
            promptRuleCritical1: "**CRITIQUE**: Votre r√©ponse enti√®re DOIT √™tre un unique objet JSON valide correspondant au sch√©ma ci-dessous. N'incluez aucun commentaire.",
            promptRuleLanguage: "**LANGUE**: Vous DEVEZ g√©n√©rer toute la r√©ponse (noms des repas, ingr√©dients, √©tapes de pr√©paration) en",
            promptRuleNoCalc: "**NE PAS calculer les calories ou les macronutriments.** C'est tr√®s important.",
            promptRuleMealDetails: "Pour chaque repas, fournir un nom, une liste d'ingr√©dients de base avec des unit√©s culinaires courantes (g, ml, pi√®ce, tasse, cuill√®re √† soupe, etc.), et les √©tapes de pr√©paration.",
            promptRuleQuantities: "Les quantit√©s doivent √™tre pour une seule portion standard.",
            promptRulePrioritize: "Vous DEVEZ prioriser l'utilisation des ingr√©dients disponibles.",
            promptRuleStaples: "Vous pouvez ajouter un nombre MINIMAL de produits de base courants (sel, poivre, huile) si n√©cessaire. Listez-les dans 'added_staples'."
        }
    };
    let currentLang = 'fr';

    // --- DATA LAYER ---
    let CIQUAL_DATA = []; 
    let fuse;
    let processedMenuData = null;
    let weightChart = null;
    let maintenanceCalories = 0;
    
    const UNIT_CONVERSIONS = {
        "huile d'olive": { "cuill√®re √† soupe": 14, "cuill√®re √† caf√©": 4.5, "ml": 0.92 }, "olive oil": { "tablespoon": 14, "tsp": 4.5, "ml": 0.92 }, "oliven√∂l": { "el": 14, "tl": 4.5, "ml": 0.92 },
        "farine": { "tasse": 120, "cuill√®re √† soupe": 7.5 }, "flour": { "cup": 120, "tablespoon": 7.5 }, "mehl": { "tasse": 120, "el": 7.5 },
        "sucre": { "tasse": 200, "cuill√®re √† soupe": 12.5 }, "sugar": { "cup": 200, "tablespoon": 12.5 }, "zucker": { "tasse": 200, "el": 12.5 },
        "lait": { "tasse": 244, "ml": 1.03 }, "milk": { "cup": 244, "ml": 1.03 }, "milch": { "tasse": 244, "ml": 1.03 },
        "eau": { "tasse": 237, "ml": 1 }, "water": { "cup": 237, "ml": 1 }, "wasser": { "tasse": 237, "ml": 1 },
        "riz": { "tasse": 185 }, "rice": { "cup": 185 }, "reis": { "tasse": 185 },
        "p√¢tes": { "tasse": 140 }, "pasta": { "cup": 140 }, "nudeln": { "tasse": 140 },
        "lentilles": { "tasse": 180 }, "lentils": { "cup": 180 }, "linsen": { "tasse": 180 },
        "oignon": { "pi√®ce": 150, "moyen": 150, "petit": 70, "grand": 225 }, "onion": { "piece": 150, "medium": 150, "small": 70, "large": 225 }, "zwiebel": { "st√ºck": 150, "mittel": 150, "klein": 70, "gro√ü": 225 },
        "ail": { "gousse": 5 }, "garlic": { "clove": 5 }, "knoblauch": { "zehe": 5 },
        "pomme": { "pi√®ce": 180 }, "apple": { "piece": 180 }, "apfel": { "st√ºck": 180 },
        "banane": { "pi√®ce": 120 }, "banana": { "piece": 120 }, "banane": { "st√ºck": 120 },
        "oeuf": { "pi√®ce": 50, "moyen": 50 }, "egg": { "piece": 50, "medium": 50 }, "ei": { "st√ºck": 50, "mittel": 50 },
        "carotte": { "pi√®ce": 60 }, "carrot": { "piece": 60 }, "karotte": { "st√ºck": 60 },
        "tomate": { "pi√®ce": 120 }, "tomato": { "piece": 120 }, "tomate": { "st√ºck": 120 },
        "pomme de terre": { "pi√®ce": 170 }, "potato": { "piece": 170 }, "kartoffel": { "st√ºck": 170 },
        "yaourt": { "pi√®ce": 125, "pot": 125, "unit√©": 125 }, "yogurt": { "piece": 125, "pot": 125, "unit": 125 }, "joghurt": { "st√ºck": 125, "becher": 125, "einheit": 125 },
        "pain": { "tranche": 30 }, "bread": { "slice": 30 }, "brot": { "scheibe": 30 }
    };

    // --- S√âLECTION DES √âL√âMENTS DU DOM ---
    const tdeeForm = document.getElementById('tdee-form');
    const tdeeResultDiv = document.getElementById('tdee-result');
    const tdeeValueSpan = document.getElementById('tdee-value');
    const healthyTdeeValueSpan = document.getElementById('healthy-tdee-value');
    const imcValueSpan = document.getElementById('imc-value');
    const imcInterpretationSpan = document.getElementById('imc-interpretation');
    const ingredientsInput = document.getElementById('ingredients');
    const suggestIngredientsBtn = document.getElementById('suggest-ingredients-btn');
    const calorieTargetInput = document.getElementById('calorie-target');
    const calorieRestrictionSelect = document.getElementById('calorie-restriction');
    const strongDeficitWarning = document.getElementById('strong-deficit-warning');
    const healthyDeficitWarning = document.getElementById('healthy-deficit-warning');
    const weightGoalSection = document.getElementById('weight-goal-section');
    const generateMenuBtn = document.getElementById('generate-menu-btn');
    const resultsContainer = document.getElementById('results-container');
    const mealPlanDisplay = document.getElementById('meal-plan-display');
    const errorMessage = document.getElementById('error-message');
    const modal = document.getElementById('meal-detail-modal');
    const modalContent = document.getElementById('modal-content');
    const printBtn = document.getElementById('print-btn');
    const printContentDiv = document.getElementById('print-content');
    const langSwitcher = document.getElementById('lang-switcher');

    // --- FONCTIONS DE TRADUCTION ---
    function setLanguage(lang) {
        if (!translations[lang]) return;
        currentLang = lang;
        localStorage.setItem('userLanguage', lang);
        document.documentElement.lang = lang;
        if (langSwitcher.value !== lang) {
            langSwitcher.value = lang;
        }

        const translationData = translations[lang];
        document.querySelectorAll('[data-translate-key]').forEach(el => {
            const key = el.getAttribute('data-translate-key');
            if (translationData[key]) el.innerHTML = translationData[key];
        });
        document.querySelectorAll('[data-translate-key-placeholder]').forEach(el => {
            const key = el.getAttribute('data-translate-key-placeholder');
            if (translationData[key]) el.placeholder = translationData[key];
        });
        document.querySelectorAll('[data-translate-key-title]').forEach(el => {
            const key = el.getAttribute('data-translate-key-title');
            if (translationData[key]) el.title = translationData[key];
        });

        if (weightChart) updateWeightProjectionChart();
        if (processedMenuData) renderMenu(processedMenuData.weeklyPlan);
    }
    
    // --- FONCTIONS PRINCIPALES DE L'APP ---
    async function loadCiqualData() {
        try {
            const response = await fetch('ciqual-complet.json');
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const rawData = await response.json();
            CIQUAL_DATA = rawData.compo
                .map(item => ({
                    name_fr: item.alim_nom_fr,
                    kcal: parseCiqualValue(item['Energie, N x facteur Jones, avec fibres  (kcal/100 g)']),
                    proteins: parseCiqualValue(item['Prot√©ines, N x 6.25 (g/100 g)']),
                    carbs: parseCiqualValue(item['Glucides (g/100 g)']),
                    fats: parseCiqualValue(item['Lipides (g/100 g)'])
                }))
                .filter(item => item.kcal > 0);
            fuse = new Fuse(CIQUAL_DATA, { includeScore: true, keys: ['name_fr'], threshold: 0.4 });
        } catch (error) {
            console.error("Erreur critique lors du chargement des donn√©es:", error);
            document.body.innerHTML = `<h1>Erreur de chargement</h1><p>Impossible de charger la base de donn√©es nutritionnelle (ciqual-complet.json). L'application ne peut pas fonctionner. Veuillez v√©rifier la console pour plus de d√©tails.</p>`;
            // NE PAS re-lancer l'erreur pour ne pas bloquer le script
        }
    }

    function checkDataLoaded() {
        if (!fuse) {
            alert(translations[currentLang].alertDataLoading);
            return false;
        }
        return true;
    }

    function calculateNeeds() {
        if (!checkDataLoaded()) return;
        const formData = new FormData(tdeeForm);
        const gender = formData.get('gender');
        const age = parseInt(formData.get('age'));
        const weight = parseFloat(formData.get('weight'));
        const height = parseFloat(formData.get('height'));
        const activityLevel = parseFloat(formData.get('activity-level'));
        if (!gender || !age || !weight || !height || !activityLevel) {
            alert(translations[currentLang].alertFillAllFields);
            return;
        }
        const calculateBMR = (w, h, a, g) => g === 'male' ? (10 * w + 6.25 * h - 5 * a + 5) : (10 * w + 6.25 * h - 5 * a - 161);
        maintenanceCalories = Math.round(calculateBMR(weight, height, age, gender) * activityLevel);
        tdeeValueSpan.textContent = maintenanceCalories;
        const heightInMeters = height / 100;
        const imc = (weight / (heightInMeters ** 2)).toFixed(1);
        imcValueSpan.textContent = imc;
        imcInterpretationSpan.textContent = getImcInterpretation(imc);
        const healthyWeight = (24.9 * (heightInMeters ** 2)).toFixed(1);
        healthyTdeeValueSpan.textContent = Math.round(calculateBMR(healthyWeight, height, age, gender) * activityLevel);
        tdeeResultDiv.classList.remove('hidden');
        weightGoalSection.classList.remove('hidden');
        updateCalorieTargetAndChart();
    }

    function getImcInterpretation(imc) {
        const lang = translations[currentLang];
        if (imc < 18.5) return lang.imcUnderweight;
        if (imc < 25) return lang.imcNormal;
        if (imc < 30) return lang.imcOverweight;
        return lang.imcObesity;
    }

    function updateCalorieTargetAndChart() {
        if (maintenanceCalories <= 0) return;
        const restriction = parseInt(calorieRestrictionSelect.value);
        calorieTargetInput.value = maintenanceCalories + restriction;
        strongDeficitWarning.classList.toggle('hidden', restriction > -750);
        updateWeightProjectionChart();
    }
    
    function updateWeightProjectionChart() {
        const weight = parseFloat(document.getElementById('weight').value);
        const height = parseFloat(document.getElementById('height').value);
        if (!weight || !height) return;
        const lang = translations[currentLang];
        const heightInMeters = height / 100;
        const imc = weight / (heightInMeters ** 2);
        const targetWeight = parseFloat((24.9 * (heightInMeters ** 2)).toFixed(1));
        const restriction = parseInt(calorieRestrictionSelect.value);
        const labels = Array.from({ length: 13 }, (_, i) => `${lang.chartMonth} ${i}`);
        const data = [weight];
        let currentWeight = weight;
        let isUnadvisedLoss = (restriction < 0 && imc < 25);
        if (restriction < 0) {
            const monthlyLossKg = ((Math.abs(restriction) * 7) / 7700) * 4.345;
            for (let i = 1; i <= 12; i++) {
                currentWeight -= monthlyLossKg;
                data.push(parseFloat(currentWeight.toFixed(1)));
            }
        } else {
             for (let i = 1; i <= 12; i++) { data.push(weight); }
        }
        healthyDeficitWarning.classList.toggle('hidden', !isUnadvisedLoss);
        const chartData = {
            labels: labels,
            datasets: [{
                label: lang.chartProjectedWeight, data: data, fill: true, tension: 0.1,
                segment: { borderColor: ctx => ((ctx.p0.parsed.y + ctx.p1.parsed.y) / 2 <= targetWeight) ? '#ef4444' : (isUnadvisedLoss ? '#ef4444' : '#65a30d') },
                backgroundColor: ctx => ((ctx.p0?.parsed.y + ctx.p1?.parsed.y) / 2 <= targetWeight) ? 'rgba(239, 68, 68, 0.1)' : (isUnadvisedLoss ? 'rgba(239, 68, 68, 0.1)' : 'rgba(101, 163, 13, 0.1)')
            }, {
                label: lang.chartTargetWeight, data: Array(13).fill(targetWeight), borderColor: '#fb923c', borderDash: [5, 5], fill: false, pointRadius: 0
            }]
        };
        const ctx = document.getElementById('weight-chart').getContext('2d');
        if (weightChart) {
            weightChart.data = chartData;
            weightChart.options.scales.y.title.text = lang.chartWeightAxis;
            weightChart.update();
        } else {
            weightChart = new Chart(ctx, { type: 'line', data: chartData, options: { responsive: true, maintainAspectRatio: false, scales: { y: { title: { display: true, text: lang.chartWeightAxis } } }, plugins: { legend: { display: true, position: 'bottom' } } } });
        }
    }

    function renderMenu(weeklyPlan) {
        mealPlanDisplay.innerHTML = '';
        const lang = translations[currentLang];
        const legendHtml = `<div class="col-span-1 sm:col-span-2 lg:col-span-4 mb-4 p-2 bg-base-200 rounded-lg flex items-center justify-center space-x-4 flex-wrap"><div class="flex items-center space-x-2"><div class="w-3 h-3 rounded-sm bg-primary"></div><span class="text-xs font-semibold">${lang.legendProteins}</span></div><div class="flex items-center space-x-2"><div class="w-3 h-3 rounded-sm bg-secondary"></div><span class="text-xs font-semibold">${lang.legendCarbs}</span></div><div class="flex items-center space-x-2"><div class="w-3 h-3 rounded-sm bg-accent"></div><span class="text-xs font-semibold">${lang.legendFats}</span></div></div>`;
        mealPlanDisplay.insertAdjacentHTML('beforeend', legendHtml);
        const planType = document.querySelector('input[name="plan-type"]:checked').value;
        const mealTypeLabels = { breakfast: lang.mealBreakfast, lunch: lang.mealLunch, dinner: lang.mealDinner, snack: lang.mealSnack };
        weeklyPlan.forEach((dayData, dayIndex) => {
            const dayCard = document.createElement('div');
            dayCard.className = 'card bg-base-100 shadow-xl flex flex-col';
            const cardBody = document.createElement('div');
            cardBody.className = 'card-body p-4 flex flex-col';
            cardBody.innerHTML = `<div><h3 class="card-title text-center block">${dayData.day}</h3><p class="text-center text-sm font-semibold mb-2">${dayData.daily_calories_total || 0} kcal</p></div>`;
            const macros = dayData.daily_macros_total, totalCalories = dayData.daily_calories_total;
            if (macros && totalCalories > 0) {
                const p = Math.round((macros.proteins * 4 / totalCalories) * 100), c = Math.round((macros.carbs * 4 / totalCalories) * 100), f = 100 - p - c;
                cardBody.innerHTML += `<div class="flex flex-col gap-1 mt-2"><progress class="progress progress-primary w-full" value="${p}" max="100" title="${lang.legendProteins}: ${p}%"></progress><progress class="progress progress-secondary w-full" value="${c}" max="100" title="${lang.legendCarbs}: ${c}%"></progress><progress class="progress progress-accent w-full" value="${f}" max="100" title="${lang.legendFats}: ${f}%"></progress></div>`;
            }
            const mealsContainer = document.createElement('div');
            mealsContainer.className = 'space-y-2 mt-4 flex-grow';
            cardBody.appendChild(mealsContainer);
            dayCard.appendChild(cardBody);
            ['breakfast', 'lunch', 'dinner', 'snack'].forEach(mealType => {
                if (mealType === 'snack' && planType !== '3 repas et 1 collation') return;
                const meal = dayData.meals[mealType];
                if (meal && meal.name) {
                    const mealCard = document.createElement('div');
                    mealCard.className = 'card card-compact bg-base-200/50';
                    mealCard.innerHTML = `<div class="card-body flex-row items-center p-2"><div class="flex-grow"><p class="font-bold text-xs text-primary uppercase tracking-wider">${mealTypeLabels[mealType] || mealType}</p><p class="text-sm leading-tight">${meal.name}</p><p class="text-xs opacity-60">${meal.calories || 'N/A'} kcal</p></div><div class="card-actions"><button class="btn btn-ghost btn-square btn-sm"><svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6.042A8.967 8.967 0 006 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 016 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 016-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0018 18a8.967 8.967 0 00-6 2.292m0-14.25v14.25" /></svg></button></div></div>`;
                    mealCard.querySelector('button').addEventListener('click', () => showMealDetails(dayIndex, mealType));
                    mealsContainer.appendChild(mealCard);
                }
            });
            mealPlanDisplay.appendChild(dayCard);
        });
    }

    async function handleMenuGeneration() {
        if (!checkDataLoaded()) return;
        const calorieTarget = parseInt(calorieTargetInput.value);
        const ingredients = ingredientsInput.value.trim();
        const planType = document.querySelector('input[name="plan-type"]:checked').value;
        const lang = translations[currentLang];
        if (!calorieTarget || calorieTarget <= 0) return alert(lang.alertCalculateNeedsFirst);
        if (!ingredients) return alert(lang.alertListIngredients);
        resultsContainer.classList.remove('hidden');
        resultsContainer.classList.add('loading');
        mealPlanDisplay.innerHTML = '';
        errorMessage.classList.add('hidden');
        const prompt = buildCreativeMenuPrompt(ingredients, planType);
        try {
            const responseText = await callGroqAPI(prompt, generateMenuBtn, true);
            const creativeMenu = JSON.parse(responseText);
            if (creativeMenu.status === 'error' || !creativeMenu.weeklyPlan) throw new Error(creativeMenu.message || lang.errorIaMenu);
            processedMenuData = await processAndScaleMenu(creativeMenu, calorieTarget, planType);
            renderMenu(processedMenuData.weeklyPlan);
        } catch (error) {
            handleError(error);
        } finally {
            resultsContainer.classList.remove('loading');
        }
    }

    function buildCreativeMenuPrompt(ingredientsList, menuStructure) {
        const lang = translations[currentLang];
        const jsonSchema = `{"status": "success" | "error", "message": "string","weeklyPlan": [ { "day": "string", "meals": {"breakfast": { "name": "string", "base_ingredients": [{"name": "string", "quantity": "number", "unit": "string"}], "preparation": "string" },"lunch": { "name": "string", "base_ingredients": [{"name": "string", "quantity": "number", "unit": "string"}], "preparation": "string" },"dinner": { "name": "string", "base_ingredients": [{"name": "string", "quantity": "number", "unit": "string"}], "preparation": "string" },"snack": { "name": "string", "base_ingredients": [{"name": "string", "quantity": "number", "unit": "string"}], "preparation": "string" }}} ],"added_staples": ["string"]}`;
        return `${lang.promptRole}\n${lang.promptContext}\n- ${lang.promptMenuStructure}: "${menuStructure}".\n- ${lang.promptAvailableIngredients}: [${ingredientsList}].\n- ${lang.promptNutritionalGoal}: "${lang.promptNutritionalGoalDetail}"\n\n${lang.promptRules}\n- ${lang.promptRuleCritical1}\n- ${lang.promptRuleLanguage} ${lang.promptLang}.\n- ${lang.promptRuleNoCalc}\n- ${lang.promptRuleMealDetails}\n- ${lang.promptRuleQuantities}\n- ${lang.promptRulePrioritize}\n- ${lang.promptRuleStaples}\n${jsonSchema}`;
    }

    function findCiqualEntry(ingredientName) { return fuse ? (fuse.search(ingredientName)[0]?.item || null) : null; }

    function convertToGrams(ingredientName, quantity, unit) {
        const cleanedUnit = unit.toLowerCase().replace(/s$/, '').replace(/\.$/, '');
        if (['g', 'gramme', 'gramm'].includes(cleanedUnit)) return quantity;
        if (['kg', 'kilogramme', 'kilogramm'].includes(cleanedUnit)) return quantity * 1000;
        const lowerCaseIngredientName = ingredientName.toLowerCase();
        for (const key in UNIT_CONVERSIONS) {
            if (lowerCaseIngredientName.includes(key)) {
                const conversion = UNIT_CONVERSIONS[key];
                if (conversion[cleanedUnit]) return quantity * conversion[cleanedUnit];
            }
        }
        if (['ml', 'milliliter', 'millilitre'].includes(cleanedUnit)) return quantity; // Approx 1g
        console.warn(`No conversion rule for: ${ingredientName} with unit ${unit}`);
        return null;
    }

    async function processAndScaleMenu(creativeMenu, dailyCalorieTarget, planType) {
        const MEAL_RATIOS = { breakfast: 0.25, lunch: 0.40, dinner: 0.35 };
        const MEAL_RATIOS_WITH_SNACK = { breakfast: 0.20, lunch: 0.35, dinner: 0.30, snack: 0.15 };
        const activeRatios = planType === '3 repas et 1 collation' ? MEAL_RATIOS_WITH_SNACK : MEAL_RATIOS;
        let processedPlan = JSON.parse(JSON.stringify(creativeMenu));
        for (const day of processedPlan.weeklyPlan) {
            let dailyCaloriesTotal = 0, dailyProteinsTotal = 0, dailyCarbsTotal = 0, dailyFatsTotal = 0;
            for (const mealType in activeRatios) {
                const meal = day.meals[mealType];
                if (!meal || !meal.base_ingredients) continue;
                let mealBaseCalories = 0;
                meal.base_ingredients.forEach(ing => {
                    const ciqualEntry = findCiqualEntry(ing.name);
                    const baseGrams = ciqualEntry ? convertToGrams(ing.name, ing.quantity, ing.unit) : null;
                    if (baseGrams !== null) mealBaseCalories += (baseGrams / 100) * ciqualEntry.kcal;
                });
                const mealTargetCalories = dailyCalorieTarget * activeRatios[mealType];
                const scalingFactor = mealBaseCalories > 0 ? mealTargetCalories / mealBaseCalories : 0;
                let finalMealCalories = 0, finalMealProteins = 0, finalMealCarbs = 0, finalMealFats = 0;
                meal.ingredients = [];
                meal.base_ingredients.forEach(ing => {
                    const ciqualEntry = findCiqualEntry(ing.name);
                    const baseGrams = ciqualEntry ? convertToGrams(ing.name, ing.quantity, ing.unit) : null;
                    if (baseGrams === null) return;
                    const finalGrams = baseGrams * scalingFactor;
                    finalMealCalories += (finalGrams / 100) * ciqualEntry.kcal;
                    finalMealProteins += (finalGrams / 100) * ciqualEntry.proteins;
                    finalMealCarbs += (finalGrams / 100) * ciqualEntry.carbs;
                    finalMealFats += (finalGrams / 100) * ciqualEntry.fats;
                    meal.ingredients.push({ item: ing.name, quantity: `${Math.round(finalGrams)} g` });
                });
                delete meal.base_ingredients;
                meal.calories = Math.round(finalMealCalories);
                meal.proteins = Math.round(finalMealProteins);
                meal.carbs = Math.round(finalMealCarbs);
                meal.fats = Math.round(finalMealFats);
                dailyCaloriesTotal += meal.calories;
                dailyProteinsTotal += meal.proteins;
                dailyCarbsTotal += meal.carbs;
                dailyFatsTotal += meal.fats;
            }
            day.daily_calories_total = dailyCaloriesTotal;
            day.daily_macros_total = { proteins: dailyProteinsTotal, carbs: dailyCarbsTotal, fats: dailyFatsTotal };
        }
        return processedPlan;
    }
    
    function showMealDetails(dayIndex, mealType) {
        const recipe = processedMenuData.weeklyPlan[dayIndex].meals[mealType];
        if (!recipe) return;
        const lang = translations[currentLang];
        let ingredientsHtml = recipe.ingredients ? recipe.ingredients.map(ing => `<li>${ing.quantity} ${ing.item}</li>`).join('') : '';
        modalContent.innerHTML = `<form method="dialog"><button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">‚úï</button></form><h3 class="font-bold text-lg text-primary">${recipe.name}</h3><div class="py-4 space-y-4"><div class="text-center"><p class="font-semibold text-base-content/80 mb-1">${recipe.calories} kcal (${lang.printCalculated})</p><div class="flex justify-center space-x-4 text-sm text-base-content/70 mb-4"><span><strong>P:</strong> ${recipe.proteins}g</span><span><strong>G:</strong> ${recipe.carbs}g</span><span><strong>L:</strong> ${recipe.fats}g</span></div></div><div><h4 class="font-bold">${lang.printIngredients}</h4><ul class="list-disc list-inside mb-4">${ingredientsHtml}</ul><h4 class="font-bold">${lang.printPreparation}</h4><p class="text-sm">${recipe.preparation.replace(/\n/g, '<br>')}</p></div></div>`;
        modal.showModal();
    }
    
    async function callGroqAPI(prompt, button, isJsonMode = false) {
        const lang = translations[currentLang];
        const originalText = button.innerHTML;
        button.disabled = true;
        button.innerHTML = lang.btnGenerating;
        try {
            const response = await fetch(NETLIFY_FUNCTION_PATH, { method: 'POST', body: JSON.stringify({ prompt, isJsonMode }), headers: { 'Content-Type': 'application/json' } });
            const responseText = await response.text();
            if (!response.ok) {
                let errorMsg = `${lang.errorServer} ${response.status}`;
                try { errorMsg = JSON.parse(responseText).error || errorMsg; } catch (e) { if (responseText) errorMsg += ` - ${responseText}`; }
                throw new Error(errorMsg);
            }
            return responseText || null;
        } finally {
            button.disabled = false;
            button.innerHTML = originalText;
        }
    }

    function handleError(error) {
        console.error("Error:", error);
        let displayError = error.message;
        i
